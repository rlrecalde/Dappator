using Oracle.ManagedDataAccess.Client;
using System;
using System.Collections.Generic;
using System.Data.Common;

namespace Dappator.Oracle.Test
{
    public class TestBase
    {
        protected string _connectionString;

        protected void CreateTables()
        {
            var dbConnection = this.GetOpenConnection();

            string createUser = @"
                CREATE TABLE IF NOT EXISTS ""User"" (
                    Id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                    Nick VARCHAR(50) NOT NULL,
                    Password VARCHAR(50) NOT NULL,
                    CONSTRAINT PK_User PRIMARY KEY (Id)
                )";

            this.ExecuteNonQuery(createUser, dbConnection);

            string createUserValue = @"
                CREATE TABLE IF NOT EXISTS ""UserValue"" (
                    Id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                    UserId INT NOT NULL,
                    Value DECIMAL(10,5) NOT NULL,
                    CONSTRAINT PK_UserValue PRIMARY KEY (Id),
                    CONSTRAINT FK_UserValueUser FOREIGN KEY (UserId) REFERENCES ""User""(Id)
                )";

            this.ExecuteNonQuery(createUserValue, dbConnection);

            string createDataType = @"
                CREATE TABLE IF NOT EXISTS ""DataType"" (
                    Id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                    ""Byte"" NUMBER(3) NULL,
                    ""Sbyte"" NUMBER(3) NULL,
                    ""Short"" NUMBER(5) NULL,
                    ""Ushort"" NUMBER(5) NULL,
                    ""Int"" NUMBER(10) NULL,
                    ""Uint"" NUMBER(10) NULL,
                    ""Long"" NUMBER(20) NULL,
                    ""Ulong"" NUMBER(20) NULL,
                    ""Float"" BINARY_FLOAT NULL,
                    ""Double"" BINARY_DOUBLE NULL,
                    ""Decimal"" FLOAT NULL,
                    ""Currency"" NUMBER(10,2) NULL,
                    ""Bool"" BOOLEAN NULL,
                    ""String"" VARCHAR(1000) NULL,
                    ""Char"" CHAR(1) NULL,
                    ""Guid"" VARCHAR(100) NULL,
                    ""DateTime"" DATE NULL,
                    ""DateTimeOffset"" TIMESTAMP NULL,
                    ""TimeSpan"" INTERVAL DAY TO SECOND NULL,
                    ""Bytes"" RAW(100) NULL,
                    CONSTRAINT PK_DataType PRIMARY KEY (Id)
                )";

            this.ExecuteNonQuery(createDataType, dbConnection);

            string deleteUserValue = "DELETE FROM \"UserValue\"";

            this.ExecuteNonQuery(deleteUserValue, dbConnection);

            string deleteUser = "DELETE FROM \"User\"";

            this.ExecuteNonQuery(deleteUser, dbConnection);

            string deleteDataType = "DELETE FROM \"DataType\"";

            this.ExecuteNonQuery(deleteDataType, dbConnection);

            this.Dispose(dbConnection);
        }

        protected void InsertUser(Model.User userModel)
        {
            var dbConnection = this.GetOpenConnection();

            string query = $"" +
                $"BEGIN " +
                $"INSERT INTO \"User\" (Nick, Password) VALUES ('{userModel.Nick}', '{userModel.Password}') " +
                $"RETURNING CAST(Id AS NUMBER) INTO :generated_id; " +
                $"END;";

            var oracleParameter = new OracleParameter("generated_id", OracleDbType.Int64, System.Data.ParameterDirection.ReturnValue);

            object id = this.ExecuteScalar(query, dbConnection, oracleParameter);
            userModel.Id = (int)(long)id;
            
            this.Dispose(dbConnection);
        }

        protected void InsertUserValue(Model.UserValue userValueModel)
        {
            var dbConnection = this.GetOpenConnection();

            string query = $"" +
                $"BEGIN " +
                $"INSERT INTO \"UserValue\" (UserId, Value) VALUES ({userValueModel.UserId}, {userValueModel.Value}) " +
                $"RETURNING CAST(Id AS NUMBER) INTO :generated_id; " +
                $"END;";

            var oracleParameter = new OracleParameter("generated_id", OracleDbType.Int64, System.Data.ParameterDirection.ReturnValue);

            object id = this.ExecuteScalar(query, dbConnection, oracleParameter);
            userValueModel.Id = (int)(long)id;

            this.Dispose(dbConnection);
        }

        protected void InsertDataType(Model.DataTypeNullable dataType)
        {
            var dbConnection = this.GetOpenConnection();

            string query = $"" +
                $"BEGIN " +
                $"INSERT INTO \"DataType\" (\"Float\", \"Double\") " +
                $"VALUES ({dataType.Float}, {dataType.Double}) " +
                $"RETURNING CAST(Id AS NUMBER) INTO :generated_id; " +
                $"END;";

            var oracleParameter = new OracleParameter("generated_id", OracleDbType.Int64, System.Data.ParameterDirection.ReturnValue);

            object id = this.ExecuteScalar(query, dbConnection, oracleParameter);
            dataType.Id = (int)(long)id;

            this.Dispose(dbConnection);
        }

        protected IEnumerable<Model.User> GetUsers()
        {
            var dbConnection = this.GetOpenConnection();

            string query = "SELECT Id, Nick, Password FROM \"User\"";

            IEnumerable<Model.User> users = this.GetUsers(query, dbConnection);

            return users;
        }

        protected void CreateSpInsertUser()
        {
            var dbConnection = this.GetOpenConnection();

            string query = "" +
                "CREATE OR REPLACE PROCEDURE \"InsertUser\" (\n" +
                "   nick IN VARCHAR,\n" +
                "   password IN VARCHAR\n" +
                ")\n" +
                "AS\n" +
                "BEGIN\n" +
                "   INSERT INTO \"User\" (Nick, Password) VALUES (nick, password);\n" +
                "END;";

            this.ExecuteNonQuery(query, dbConnection);

            this.Dispose(dbConnection);
        }

        protected void CreateSpInsertUserAndGetId()
        {
            var dbConnection = this.GetOpenConnection();

            string query = "" +
                "";

            this.ExecuteNonQuery(query, dbConnection);

            this.Dispose(dbConnection);
        }

        protected void CreateSpGetUserById()
        {
            var dbConnection = this.GetOpenConnection();

            string query = "" +
                "";

            this.ExecuteNonQuery(query, dbConnection);

            this.Dispose(dbConnection);
        }

        protected void CreateSpGetUsers()
        {
            var dbConnection = this.GetOpenConnection();

            string query = "" +
                "";

            this.ExecuteNonQuery(query, dbConnection);

            this.Dispose(dbConnection);
        }

        protected void CreateFnGetUsers()
        {
            var dbConnection = this.GetOpenConnection();
            this.CreateOracleTypes(dbConnection);

            string query = "" +
                "CREATE OR REPLACE FUNCTION \"FnGetUsers\"\n" +
                "RETURN t_user\n" +
                "AS\n" +
                "BEGIN\n" +
                "   DECLARE user_table t_user;\n" +
                "   BEGIN\n" +
                "      SELECT t_user_record(Id, Nick, Password) BULK COLLECT INTO user_table FROM \"User\";\n" +
                "      RETURN user_table;\n" +
                "   END;\n" +
                "END;\n";

            this.ExecuteNonQuery(query, dbConnection);

            this.Dispose(dbConnection);
        }

        protected void CreateFnGetUserIdByNick()
        {
            var dbConnection = this.GetOpenConnection();

            string query = "" +
                "CREATE OR REPLACE FUNCTION \"FnGetUserIdByNick\"\n" +
                "(\n" +
                "   p_nick IN VARCHAR\n" +
                ")\n" +
                "RETURN INT\n" +
                "IS userid INT;\n" +
                "BEGIN\n" +
                "   SELECT Id INTO userid FROM \"User\" WHERE Nick = p_nick OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY;\n" +
                "   RETURN (userid);\n" +
                "END;";

            this.ExecuteNonQuery(query, dbConnection);

            this.Dispose(dbConnection);
        }

        #region Private Methods

        private OracleConnection GetOpenConnection()
        {
            var dbConnection = new OracleConnection(this._connectionString);
            dbConnection.Open();

            return dbConnection;
        }

        private void ExecuteNonQuery(string query, OracleConnection sqlConnection)
        {
            var dbCommand = new OracleCommand(query, sqlConnection);
            dbCommand.ExecuteNonQuery();
            dbCommand.Dispose();
        }

        private object ExecuteScalar(string query, OracleConnection sqlConnection, OracleParameter oracleParameter = null)
        {
            var dbCommand = new OracleCommand(query, sqlConnection);

            if (oracleParameter != null)
                dbCommand.Parameters.Add(oracleParameter);

            object id = dbCommand.ExecuteScalar();

            if (oracleParameter != null)
                id = Convert.ToInt64(dbCommand.Parameters["generated_id"].Value.ToString());

            dbCommand.Dispose();

            return id;
        }

        private IEnumerable<Model.User> GetUsers(string query, OracleConnection sqlConnection)
        {
            string idPropertyName = string.Empty;
            string nickPropertyName = string.Empty;
            string passwordPropertyName = string.Empty;

            var userModelReference = Activator.CreateInstance(typeof(Model.User));
            var properties = userModelReference.GetType().GetProperties();

            foreach (var property in properties)
            {
                if (property.Name == "Id")
                    idPropertyName = ((System.ComponentModel.DescriptionAttribute[])userModelReference.GetType().GetProperty(property.Name).GetCustomAttributes(typeof(System.ComponentModel.DescriptionAttribute), false))[0].Description;

                if (property.Name == "Nick")
                    nickPropertyName = ((System.ComponentModel.DescriptionAttribute[])userModelReference.GetType().GetProperty(property.Name).GetCustomAttributes(typeof(System.ComponentModel.DescriptionAttribute), false))[0].Description;

                if (property.Name == "Password")
                    passwordPropertyName = ((System.ComponentModel.DescriptionAttribute[])userModelReference.GetType().GetProperty(property.Name).GetCustomAttributes(typeof(System.ComponentModel.DescriptionAttribute), false))[0].Description;
            }

            var userModels = new List<Model.User>();
            var dbCommand = new OracleCommand(query, sqlConnection);
            DbDataReader dataReader = dbCommand.ExecuteReader();
            while (dataReader.Read())
            {
                var userModel = (Model.User)Activator.CreateInstance(typeof(Model.User));

                int id = Convert.ToInt32(dataReader[idPropertyName]);
                string nick = dataReader[nickPropertyName].ToString();
                string password = dataReader[passwordPropertyName].ToString();

                userModel.Id = id;
                userModel.Nick = nick;
                userModel.Password = password;

                userModels.Add(userModel);
            }

            dataReader.Close();
            dbCommand.Dispose();

            return userModels;
        }

        private void CreateOracleTypes(OracleConnection sqlConnection)
        {
            try
            {
                string query = "CREATE OR REPLACE TYPE t_user_record AS OBJECT (Id INT, Nick VARCHAR(50), Password VARCHAR(50));";
                var dbCommand = new OracleCommand(query, sqlConnection);
                dbCommand.ExecuteNonQuery();
                dbCommand.Dispose();
            }
            catch (Exception) { }

            try
            {
                string query = "CREATE OR REPLACE TYPE t_user AS TABLE OF t_user_record;";
                var dbCommand = new OracleCommand(query, sqlConnection);
                dbCommand.ExecuteNonQuery();
                dbCommand.Dispose();
            }
            catch (Exception) { }
        }

        private void Dispose(DbConnection dbConnection)
        {
            if (dbConnection != null)
            {
                dbConnection.Close();
                dbConnection.Dispose();
            }
        }

        #endregion
    }
}
