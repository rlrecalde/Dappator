using FirebirdSql.Data.FirebirdClient;
using System.Data.Common;

namespace Dappator.Test.Providers
{
    public class FirebirdProvider : IProvider
    {
        public DbConnection GetOpenConnection(string connectionString)
        {
            var FbConnection = new FbConnection(connectionString);
            FbConnection.Open();

            return FbConnection;
        }

        public DbCommand GetCommand(string query, DbConnection dbConnection)
        {
            var FbCommand = new FbCommand(query, (FbConnection)dbConnection);

            return FbCommand;
        }

        public string GetInsertUserQuery(string nick, string password)
        {
            string query = $"" +
                $"INSERT INTO \"User\" (\"Nick\", \"Password\") VALUES ('{nick}', '{password}') " +
                $"RETURNING CAST(\"Id\" AS BIGINT);";

            return query;
        }

        public string GetInsertUserValueQuery(int userId, double value)
        {
            string query = $"" +
                $"INSERT INTO \"UserValue\" (\"UserId\", \"Value\") VALUES ({userId}, {value}) " +
                $"RETURNING CAST(\"Id\" AS BIGINT);";

            return query;
        }

        public string GetCreateUserTableQuery()
        {
            string query = @"
                EXECUTE BLOCK AS BEGIN
                IF (NOT EXISTS (SELECT * FROM rdb$relations WHERE rdb$relation_name = 'User')) THEN
                EXECUTE STATEMENT
                    'CREATE TABLE ""User"" (
                        ""Id"" INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                        ""Nick"" VARCHAR(50) NOT NULL,
                        ""Password"" VARCHAR(50) NOT NULL,
                        CONSTRAINT PK_User PRIMARY KEY (""Id"")
                    );';
                END";

            return query;
        }

        public string GetDeleteUserQuery()
        {
            string query = "DELETE FROM \"User\"";

            return query;
        }

        public string GetCreateUserValueTableQuery()
        {
            string query = @"
                EXECUTE BLOCK AS BEGIN
                IF (NOT EXISTS (SELECT * FROM rdb$relations WHERE rdb$relation_name = 'UserValue')) THEN
                EXECUTE STATEMENT
                    'CREATE TABLE ""UserValue"" (
                        ""Id"" INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                        ""UserId"" INT NOT NULL,
                        ""Value"" DECIMAL(10,5) NOT NULL,
                        CONSTRAINT PK_UserValue PRIMARY KEY (""Id""),
                        CONSTRAINT FK_UserValueUser FOREIGN KEY (""UserId"") REFERENCES ""User""(""Id"")
                    );';
                END";

            return query;
        }

        public string GetDeleteUserValueQuery()
        {
            string query = "DELETE FROM \"UserValue\"";

            return query;
        }

        public string GetUsersQuery()
        {
            string query = "SELECT \"Id\" AS \"\"\"Id\"\"\", \"Nick\" AS \"\"\"Nick\"\"\", \"Password\" AS \"\"\"Password\"\"\" FROM \"User\"";

            return query;
        }

        public string GetCreateSpInsertUserQuery()
        {
            string query = "" +
                "CREATE OR ALTER PROCEDURE \"InsertUser\" (\n" +
                "   nick VARCHAR(50),\n" +
                "   password VARCHAR(50)\n" +
                ")\n" +
                "AS\n" +
                "BEGIN\n" +
                "   INSERT INTO \"User\" (\"Nick\", \"Password\") VALUES (:nick, :password);\n" +
                "END;";

            return query;
        }

        public string GetCreateSpInsertUserAndGetIdQuery()
        {
            string query = "" +
                "CREATE OR ALTER PROCEDURE \"InsertUserAndGetId\" (\n" +
                "   nick VARCHAR(50),\n" +
                "   password VARCHAR(50)\n" +
                ")\n" +
                "RETURNS (userId BIGINT)\n" +
                "AS\n" +
                "BEGIN\n" +
                "   INSERT INTO \"User\" (\"Nick\", \"Password\") VALUES (:nick, :password) RETURNING CAST(\"Id\" AS BIGINT) INTO :userId;\n" +
                "END;";

            return query;
        }

        public string GetCreateSpGetUserByIdQuery()
        {
            string query = "" +
                "CREATE OR ALTER PROCEDURE \"GetUserById\" (\n" +
                "   userid INT\n" +
                ")\n" +
                "RETURNS (\n" +
                "   Id INT,\n" +
                "   Nick VARCHAR(50),\n" +
                "   Password VARCHAR(50)\n" +
                ")\n" +
                "AS\n" +
                "BEGIN\n" +
                "   SELECT \"Id\", \"Nick\", \"Password\" FROM \"User\" WHERE \"Id\" = :userid INTO :Id, :Nick, :Password;\n" +
                "   SUSPEND;\n" +
                "END;";

            return query;
        }

        public string GetCreateSpGetUsersQuery()
        {
            string query = "" +
                "CREATE OR ALTER PROCEDURE \"GetUsers\" ()\n" +
                "RETURNS (\n" +
                "   Id INT,\n" +
                "   Nick VARCHAR(50),\n" +
                "   Password VARCHAR(50)\n" +
                ")\n" +
                "AS\n" +
                "BEGIN\n" +
                "   FOR\n" +
                "      SELECT \"Id\", \"Nick\", \"Password\" FROM \"User\" INTO :Id, :Nick, :Password\n" +
                "   DO\n" +
                "   SUSPEND;\n" +
                "END;";

            return query;
        }

        public string GetCreateFnGetUsersQuery()
        {
            string query = "" +
                "";

            return query;
        }

        public string GetCreateFnGetUserIdByNickQuery()
        {
            string query = "" +
                "CREATE OR ALTER FUNCTION \"FnGetUserIdByNick\" (\n" +
                "   nick VARCHAR(50)\n" +
                ")\n" +
                "RETURNS INT\n" +
                "AS\n" +
                "BEGIN\n" +
                "   RETURN (\n" +
                "      SELECT \"Id\" FROM \"User\" WHERE \"Nick\" = :nick\n" +
                "   );\n" +
                "END;";

            return query;
        }
    }
}
