using Oracle.ManagedDataAccess.Client;
using System.Data.Common;

namespace Dappator.Test.Providers
{
    public class OracleProvider : IProvider
    {
        public DbConnection GetOpenConnection(string connectionString)
        {
            var SqlConnection = new OracleConnection(connectionString);
            SqlConnection.Open();

            return SqlConnection;
        }

        public DbCommand GetCommand(string query, DbConnection dbConnection)
        {
            var SqlCommand = new OracleCommand(query, (OracleConnection)dbConnection);

            return SqlCommand;
        }

        public string GetInsertUserQuery(string nick, string password)
        {
            string query = $"" +
                $"BEGIN " +
                $"INSERT INTO \"User\" (Nick, Password) VALUES ('{nick}', '{password}') " +
                $"RETURNING CAST(Id AS NUMBER) INTO :generated_id; " +
                $"END;";

            return query;
        }

        public string GetInsertUserValueQuery(int userId, double value)
        {
            string query = $"" +
                $"BEGIN " +
                $"INSERT INTO \"UserValue\" (UserId, Value) VALUES ({userId}, {value}) " +
                $"RETURNING CAST(Id AS NUMBER) INTO :generated_id; " +
                $"END;";

            return query;
        }

        public string GetCreateUserTableQuery()
        {
            string query = @"
                CREATE TABLE IF NOT EXISTS ""User"" (
                    Id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                    Nick VARCHAR(50) NOT NULL,
                    Password VARCHAR(50) NOT NULL,
                    CONSTRAINT PK_User PRIMARY KEY (Id)
                )";

            return query;
        }

        public string GetDeleteUserQuery()
        {
            string query = "DELETE FROM \"User\"";

            return query;
        }

        public string GetCreateUserValueTableQuery()
        {
            string query = @"
                CREATE TABLE IF NOT EXISTS ""UserValue"" (
                    Id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                    UserId INT NOT NULL,
                    Value DECIMAL(10,5) NOT NULL,
                    CONSTRAINT PK_UserValue PRIMARY KEY (Id),
                    CONSTRAINT FK_UserValueUser FOREIGN KEY (UserId) REFERENCES ""User""(Id)
                )";

            return query;
        }

        public string GetDeleteUserValueQuery()
        {
            string query = "DELETE FROM \"UserValue\"";

            return query;
        }

        public string GetUsersQuery()
        {
            string query = "SELECT Id, Nick, Password FROM \"User\"";

            return query;
        }

        public string GetCreateSpInsertUserQuery()
        {
            string query = "" +
                "CREATE OR REPLACE PROCEDURE \"InsertUser\" (\n" +
                "   nick IN VARCHAR,\n" +
                "   password IN VARCHAR\n" +
                ")\n" +
                "AS\n" +
                "BEGIN\n" +
                "   INSERT INTO \"User\" (Nick, Password) VALUES (nick, password);\n" +
                "END;";

            return query;
        }

        public string GetCreateSpInsertUserAndGetIdQuery()
        {
            string query = "" +
                "";

            return query;
        }

        public string GetCreateSpGetUserByIdQuery()
        {
            string query = "" +
                "";

            return query;
        }

        public string GetCreateSpGetUsersQuery()
        {
            string query = "" +
                "";

            return query;
        }

        public string GetCreateFnGetUsersQuery()
        {
            string query = "" +
                "CREATE OR REPLACE FUNCTION \"FnGetUsers\"\n" +
                "RETURN t_user\n" +
                "AS\n" +
                "BEGIN\n" +
                "   DECLARE user_table t_user;\n" +
                "   BEGIN\n" +
                "      SELECT t_user_record(Id, Nick, Password) BULK COLLECT INTO user_table FROM \"User\";\n" +
                "      RETURN user_table;\n" +
                "   END;\n" +
                "END;\n";

            return query;
        }

        public string GetCreateFnGetUserIdByNickQuery()
        {
            string query = "" +
                "CREATE OR REPLACE FUNCTION \"FnGetUserIdByNick\"\n" +
                "(\n" +
                "   p_nick IN VARCHAR\n" +
                ")\n" +
                "RETURN INT\n" +
                "IS userid INT;\n" +
                "BEGIN\n" +
                "   SELECT Id INTO userid FROM \"User\" WHERE Nick = p_nick OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY;\n" +
                "   RETURN (userid);\n" +
                "END;";

            return query;
        }
    }
}
